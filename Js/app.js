// Importa el m√≥dulo 'fs' para manejar archivos
const fs = require('fs'); 
// Importa el m√≥dulo 'path' para manejar rutas de archivos
const path = require('path'); 
// Importa el m√≥dulo 'readline-sync' para entrada de datos por consola
const readline = require('readline-sync'); 

// Define la ruta del archivo donde se guardar√°n las tareas
const DB_FILE = path.join(__dirname, 'tareas.json');
// Define los estados v√°lidos para las tareas
const VALID_STATUSES = ['pendiente', 'en progreso', 'completada'];

// --- Funciones de utilidad ---

// Lee las tareas desde el archivo JSON
function readTasksFromFile() {
    try {
        // Si el archivo no existe, lo crea vac√≠o
        if (!fs.existsSync(DB_FILE)) {
            fs.writeFileSync(DB_FILE, '{}');
            return {};
        }
        // Lee el contenido del archivo y lo convierte a objeto
        const data = fs.readFileSync(DB_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        // Maneja errores de lectura o parseo
        console.error(' ‚ùå Error al leer el archivo de tareas:', error.message);
        return {};
    }
}

// Escribe las tareas en el archivo JSON
function writeTasksToFile(tasks) {
    try {
        fs.writeFileSync(DB_FILE, JSON.stringify(tasks, null, 2));
        return true;
    } catch (error) {
        // Maneja errores de escritura
        console.error('‚ùå  Error al guardar tareas:', error.message);
        return false;
    }
}

// Valida que la c√©dula solo contenga n√∫meros
function validateCedula(cedula) {
    return /^\d+$/.test(cedula); 
}

// Valida que el estado de la tarea sea uno de los permitidos
function validateStatus(status) {
    return VALID_STATUSES.includes(status.toLowerCase());
}

// --- Funcionalidades principales ---

// Registra un nuevo usuario en el sistema
function registrarUsuario() {
    console.log('\n--- Registrar Nuevo Usuario ---');
    
    // Solicita el nombre del usuario
    const nombre = readline.question('Ingrese el nombre del usuario: ').trim();
    if (!nombre) {
        console.log(' ‚ö†Ô∏è  El nombre no puede estar vac√≠o.');
        return;
    }

    // Solicita la c√©dula y la valida
    let cedula;
    while (true) {
        cedula = readline.question('Ingrese la c√©dula del usuario (solo n√∫meros): ').trim();
        if (validateCedula(cedula)) break;
        console.log('‚ö†Ô∏è  C√©dula inv√°lida. Solo se permiten n√∫meros.');
    }

    // Lee las tareas actuales
    const tasks = readTasksFromFile();
    
    // Verifica si la c√©dula ya est√° registrada
    if (tasks[cedula]) {
        console.log(` ‚ùå  La c√©dula ${cedula} ya est√° registrada para el usuario: ${tasks[cedula].Usuario}`);
        return;
    }

    // Crea un nuevo usuario con datos vac√≠os de tarea
    tasks[cedula] = {
        Usuario: nombre,
        titulo: '',
        descripcion: '',
        estado: '',
        fechaCreacion: new Date().toISOString()
    };

    // Guarda los cambios en el archivo
    if (writeTasksToFile(tasks)) {
        console.log(`Usuario ${nombre} con c√©dula ${cedula} registrado exitosamente ‚úÖ .`);
    }
}

// Registra una nueva tarea para un usuario existente
function registrarTarea() {
    console.log('\n--- Registrar Nueva Tarea ---');
    
    // Solicita la c√©dula y la valida
    const cedula = readline.question('Ingrese la c√©dula del usuario: ').trim();
    if (!validateCedula(cedula)) {
        console.log('‚ùå  C√©dula inv√°lida.');
        return;
    }

    // Lee las tareas actuales
    const tasks = readTasksFromFile();
    // Verifica si el usuario existe
    if (!tasks[cedula]) {
        console.log('‚ö†Ô∏è  No existe un usuario con esa c√©dula. Registre el usuario primero.');
        return;
    }

    // Solicita el t√≠tulo de la tarea
    const titulo = readline.question('Ingrese el t√≠tulo de la tarea: ').trim();
    if (!titulo) {
        console.log('‚ö†Ô∏è El t√≠tulo no puede estar vac√≠o.');
        return;
    }

    // Solicita la descripci√≥n de la tarea
    const descripcion = readline.question('Ingrese la descripci√≥n: ').trim();
    
    // Solicita y valida el estado de la tarea
    let estado;
    while (true) {
        estado = readline.question(`Ingrese el estado (${VALID_STATUSES.join('/')}): `).trim().toLowerCase();
        if (validateStatus(estado)) break;
        console.log(`Estado inv√°lido. Use uno de: ${VALID_STATUSES.join(', ')}`); // Valid_status es una constante que contiene los estados v√°lidos
    }

    // Actualiza la tarea del usuario
    tasks[cedula] = {
        ...tasks[cedula],
        titulo,
        descripcion,
        estado,
        fechaActualizacion: new Date().toISOString()
    };

    // Guarda los cambios en el archivo
    if (writeTasksToFile(tasks)) {
        console.log(`Tarea "${titulo}" registrada para ${tasks[cedula].Usuario} (${cedula}) exitosamente ‚úÖ .`);
    }
}

// Lista todas las tareas de un usuario por su c√©dula
function listarTareasPorUsuario() {
    console.log('\n--- Lista de Tareas por Usuario ---');
    
    // Solicita la c√©dula y la valida
    const cedula = readline.question('Ingrese la c√©dula del usuario: ').trim();
    if (!validateCedula(cedula)) {
        console.log('  ‚ùå  C√©dula inv√°lida.');
        return;
    }

    // Lee las tareas actuales
    const tasks = readTasksFromFile();
    const tarea = tasks[cedula];

    // Verifica si el usuario existe
    if (!tarea) {
        console.log('‚ö†Ô∏è  No se encontr√≥ usuario con esa c√©dula.');
        return;
    }

    // Muestra la informaci√≥n de la tarea
    console.log(`\nTareas de ${tarea.Usuario} (${cedula}):`);
    console.log(`1. T√≠tulo: ${tarea.titulo}`);
    console.log(`2.   Descripci√≥n: ${tarea.descripcion}`);
    console.log(`3.   Estado: ${tarea.estado}`);
    console.log(`   Creada: ${new Date(tarea.fechaCreacion).toLocaleString()}`);
    if (tarea.fechaActualizacion) {
        console.log(`   Actualizada: ${new Date(tarea.fechaActualizacion).toLocaleString()}`);  // Muestra la fecha de actualizaci√≥n si existe
    }
}

// Lista solo las tareas pendientes de un usuario
function listarTareasPendientes() {
    console.log('\n--- Tareas Pendientes por Usuario ---');
    
    // Solicita la c√©dula y la valida
    const cedula = readline.question('Ingrese la c√©dula del usuario: ').trim();
    if (!validateCedula(cedula)) {
        console.log('  ‚ùå  C√©dula inv√°lida.');
        return;
    }

    // Lee las tareas actuales
    const tasks = readTasksFromFile();
    const tarea = tasks[cedula];

    // Verifica si el usuario existe
    if (!tarea) {
        console.log('‚ö†Ô∏è  No se encontr√≥ usuario con esa c√©dula.');
        return;
    }

    // Verifica si la tarea est√° pendiente
    if (tarea.estado !== 'pendiente') {
        console.log(`‚ö†Ô∏è  El usuario ${tarea.Usuario} no tiene tareas pendientes.`);
        return;
    }

    // Muestra la informaci√≥n de la tarea pendiente
    console.log(`\nTareas pendientes de ${tarea.Usuario} (${cedula}):`);
    console.log(`1. T√≠tulo: ${tarea.titulo}`);
    console.log(`2. Descripci√≥n: ${tarea.descripcion}`);
    console.log(`3. Creada: ${new Date(tarea.fechaCreacion).toLocaleString()}`);
}

// --- Men√∫ principal ---
// Muestra el men√∫ principal de opciones
function mostrarMenu() {
    console.log(`
‚ú®‚ú® ----------------------------------------------‚ú®‚ú®
--- Bienvenido al sistema de gestion de tareas ---
‚ú®‚ú® ----------------------------------------------‚ú®‚ú®
[1] ‚ûï   Registrar nuevo usuario
[2] üñãÔ∏è   Registrar tarea
[3] üîé   Listar Tareas
[4] üëÄ   Listar tareas pendientes
[5] üë£   Salir
‚ú®‚ú® ----------------------------------------------‚ú®‚ú®
`);

}

// Funci√≥n principal que ejecuta el men√∫ y las opciones
function main() {
    let opcion;
    
    do {
        mostrarMenu();
        opcion = readline.question('Seleccione una opci√≥n: ').trim();

        switch (opcion) {
            case '1':
                registrarUsuario();
                break;
            case '2':
                registrarTarea();
                break;
            case '3':
                listarTareasPorUsuario();
                break;
            case '4':
                listarTareasPendientes();
                break;
            case '5':
                console.log('Saliendo del sistema, Gracias por usar nuestros servicios üòâ...');
                break;
            default:
                console.log('Opci√≥n no v√°lida. Intente nuevamente.');
        }

        // Espera que el usuario presione Enter antes de continuar
        if (opcion !== '5') {
            readline.question('\nPresione Enter para continuar...');
        }
    } while (opcion !== '5');
}

// Inicia la aplicaci√≥n
main();